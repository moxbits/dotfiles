
* Packages

** Initializing Packages Repos and Package Manager
#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t)

  (package-initialize)

  ;; Bootstrap 'use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Enable 'use-package'
  (eval-when-compile
    (require 'use-package))

#+end_src


* Basic Configurations

** Basic Configs
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq inhibit-startup-screen t)
  (setq ring-bell-function 'ignore)

  ;; Disable menu bar, tool bar, and scroll bar only in GUI mode
  (when (display-graphic-p)
    (add-to-list 'initial-frame-alist '(fullscreen . maximized))
    (menu-bar-mode -1)    ; Disable the menu bar
    (tool-bar-mode -1)    ; Disable the tool bar
    (scroll-bar-mode -1)) ; Disable the scroll bar

  ;; Disable the creation of backup files
  (setq make-backup-files nil)    ;; stop creating backup~ files
  (setq auto-save-default nil)    ;; stop creating #autosave# files
  (setq create-lockfiles nil)
#+end_src

** Tweaking More
#+begin_src emacs-lisp
  ;; (set-frame-parameter (selected-frame) 'alpha 0.85)

  (setq display-line-numbers-type 'relative)

  (global-display-line-numbers-mode)

  (set-face-attribute 'default nil
	:family "FiraCode Nerd Font"
	:height 200)

  (setq dired-listing-switches  "-agho --group-directories-first")

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

  (add-hook 'term-mode-hook 'eterm-256color-mode)

  ;; Ensure all characters can be displayed
  (use-package all-the-icons :ensure t)
  (use-package all-the-icons-dired :ensure t)
  (use-package all-the-icons-nerd-fonts :ensure t)

  (use-package emojify
    :ensure t
    :config
    (global-emojify-mode 1))
#+end_src

** Theme
#+begin_src emacs-lisp
  (load-theme 'manoj-dark t)

  (custom-set-faces
    '(default ((t (:background "black"))))
    '(line-number ((t (:background "black"))))
    '(line-number-current-line ((t (:background "black")))))
#+end_src


* Files and Projects Navigation and Completion Framework

** Setting Ivy Up
#+begin_src emacs-lisp
  ;; Ivy
  (use-package ivy
    :ensure t
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
  
  ;; Ivy-Rich
  (use-package ivy-rich
    :ensure t
    :after ivy
    :config
    (ivy-rich-mode 1))
#+end_src

** Where is My Counsel?
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("C-M-j" . counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . counsel-minibuffer-history))
    :config
    (counsel-mode 1))
#+end_src

** Launch the Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-completion-system 'ivy)
    :config
    (projectile-mode 1)
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects" "~/work")))
    (setq projectile-switch-project-action #'projectile-dired)
    :bind-keymap
    ("C-c p" . projectile-command-map))
  
  (use-package counsel-projectile
    :ensure t
    :after (projectile counsel)
    :config
    (counsel-projectile-mode 1))
#+end_src



* Keybindings

** Before binding keys
#+begin_src emacs-lisp
  (defun open-emacs-config ()
    "Open your Emacs configuration file."
    (interactive)
    (find-file (expand-file-name "~/.emacs.d/baseconf.org")))

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  ;; Evil mode
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))

  ;; Mapping Escape to jj
  (use-package key-chord
  :ensure t
  :after evil
  :init
  (setq key-chord-two-keys-delay 0.4)
  :config
  (key-chord-mode 1)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state))

  ;; Evil Leader
  (use-package evil-leader
    :ensure t
    :after evil
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>"))

  ;; Evil Collection
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))

  ;; Evil Commentary
  (use-package evil-commentary
    :ensure t
    :after evil
    :config
    (evil-commentary-mode))
#+end_src

** General Custom Bindings
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-create-definer leader-key-def :prefix "SPC")
    (leader-key-def
      :states '(normal dired-mode-map)
      :keymaps 'override

      "h" 'windmove-left
      "j" 'windmove-down
      "k" 'windmove-up
      "l" 'windmove-right

      "d" 'dired
      "f" 'find-file

      "e c" 'open-emacs-config

      "e t l" '(lambda ()
		 (interactive)
		 (find-file "~/.local/org/todo.org"))

      "e t d" '(lambda ()
		 (interactive)
		 (find-file "~/Dropbox/org/todo.org"))

      "t c c" 'global-company-mode
      "t c f" 'set-company-full-frontend
      "t c p" 'set-company-preview-frontend
      "t c d" 'unset-company-frontends
      "t v a" 'pyvenv-activate

      "g g" 'magit-status

      "p" 'projectile-command-map

      "i s" 'swiper-isearch
      "i v" 'ivy-push-view
      "i V" 'ivy-pop-view
      "i r" 'ivy-resume

      ;; orgmode keybindings
      "o l" 'org-store-link
      "o a" 'org-agenda
      "o c" 'org-capture
      "o x" 'org-toggle-checkbox
      "o t" 'org-todo

      ;; avy keybindings
      "SPC f" 'avy-goto-char
      "SPC F" 'avy-goto-char-2
      "SPC w" 'avy-goto-word-0
      "SPC W" 'avy-goto-word-1
      "SPC j" 'avy-goto-line
      "SPC k" 'avy-goto-line

      "b f" 'format-all-buffer
      "b s" 'ivy-switch-buffer

      "c a f" 'counsel-describe-function
      "c a v" 'counsel-describe-variable
      "c a l" 'counsel-find-library
      "c a i" 'counsel-info-lookup-symbol
      "c a u" 'counsel-unicode-char
      "c a j" 'counsel-set-variable
      "c c" 'counsel-compile
      "c j" 'counsel-git-grep
      "c L" 'counsel-git-log
      "c l" 'counsel-locate
      "c b" 'counsel-bookmark
      "c g" 'counsel-git
      "c t" 'counsel-load-theme
      "c y" 'counsel-yank-pop
      "c f" 'counsel-find-file
      "c z" 'counsel-fzf
      "c r" 'counsel-rg
      "c j" 'counsel-file-jump
      "c F" 'counsel-org-file
      "c m" 'counsel-find-file-run-immediate))
#+end_src


* Extra Packages

** Git Integration
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

** Which Key Helper
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-setup-side-window-bottom)
    (which-key-mode))
#+end_src

** Smart Parenthesis
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-mode 1))
#+end_src

